name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Debug SonarQube Connection
        shell: powershell
        run: |
          Write-Host "Checking SonarQube server URL: ${{ secrets.SONAR_HOST_URL }}"
          $response = Invoke-WebRequest -Uri "${{ secrets.SONAR_HOST_URL }}/api/server/version" -UseBasicParsing
          Write-Host "SonarQube server response: $response"
      - name: Build and analyze
        shell: powershell
        run: |
          $retries = 5
          for ($i=0; $i -lt $retries; $i++) {
            try {
              .\.sonar\scanner\dotnet-sonarscanner begin /k:"Project-UserData" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
              break
            } catch {
              if ($i -eq $retries - 1) {
                throw $_
              } else {
                Write-Host "Retrying SonarQube connection..."
                Start-Sleep -Seconds 15
              }
            }
          }
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
